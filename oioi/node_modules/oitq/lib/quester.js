"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Quester = void 0;
const ws_1 = __importDefault(require("ws"));
const proxy_agent_1 = __importDefault(require("proxy-agent"));
const axios_1 = __importDefault(require("axios"));
var Quester;
(function (Quester) {
    const agents = {};
    function getAgent(url) {
        return agents[url] || (agents[url] = new proxy_agent_1.default(url));
    }
    function create(config = {}) {
        const { endpoint = '' } = config;
        const options = {
            timeout: config.timeout,
            headers: config.headers,
        };
        if (config.proxyAgent) {
            options.httpAgent = getAgent(config.proxyAgent);
            options.httpsAgent = getAgent(config.proxyAgent);
        }
        const request = async (url, config = {}) => (0, axios_1.default)({
            ...options,
            ...config,
            url: endpoint + url,
            headers: {
                ...options.headers,
                ...config.headers,
            },
        });
        const http = (async (method, url, config) => {
            const response = await request(url, { ...config, method });
            return response.data;
        });
        http.config = config;
        http.axios = request;
        http.extend = (newConfig) => create({ ...config, ...newConfig });
        http.get = (url, config) => http('GET', url, config);
        http.delete = (url, config) => http('DELETE', url, config);
        http.post = (url, data, config) => http('POST', url, { ...config, data });
        http.put = (url, data, config) => http('PUT', url, { ...config, data });
        http.patch = (url, data, config) => http('PATCH', url, { ...config, data });
        http.head = async (url, config) => {
            const response = await request(url, { ...config, method: 'HEAD' });
            return response.headers;
        };
        http.ws = (url, options = {}) => {
            return new ws_1.default(url, {
                agent: getAgent(config.proxyAgent),
                handshakeTimeout: config.timeout,
                ...options,
                headers: {
                    ...config.headers,
                    ...options.headers,
                },
            });
        };
        return http;
    }
    Quester.create = create;
})(Quester = exports.Quester || (exports.Quester = {}));
