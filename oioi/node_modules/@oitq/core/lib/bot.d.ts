import { Client, Config, EventMap, Quotable, Sendable } from 'oicq';
import { App } from './app';
import { Session } from './session';
import { Middleware } from './middleware';
import { Define, Extend } from "@oitq/utils";
import { MessageRet } from "oicq/lib/events";
export declare type TargetType = 'group' | 'private' | 'discuss';
export declare type ChannelId = `${TargetType}:${number}`;
export declare type LoginType = 'qrcode' | 'password';
export interface BotOptions {
    uin?: number;
    config: Config;
    type: LoginType;
    password?: string;
    nickname?: string | string[];
    prefix?: string | string[];
    master?: number;
    admins?: number[];
    parent?: number;
}
export declare type ToSession<A extends any[] = []> = A extends [object, ...infer O] ? Extend<Define<Session, 'args', O>, A[0]> : Define<Session, 'args', A>;
export declare type NSession<E extends keyof EventMap> = ToSession<Parameters<EventMap[E]>>;
declare type Transform = {
    [P in keyof EventMap as `bot.${P}`]: (session: NSession<P>) => void;
};
export interface BotEventMap extends Transform {
    'bot.add'(bot: Bot): void;
    'bot.remove'(bot: Bot): void;
}
export declare class Bot extends Client {
    app: App;
    private options;
    middlewares: Middleware[];
    private _nameRE;
    admins: number[];
    master: number;
    constructor(app: App, options: BotOptions);
    isMaster(user_id: number): boolean;
    isAdmin(user_id: number): boolean;
    middleware(middleware: Middleware, prepend?: boolean): () => boolean;
    startProcessLogin(): void;
    createAdminLink<E extends keyof EventMap>(event: `bot.${E}`, admins: number[], bot: Bot): Promise<Extend<Define<Session, "args", []>, import("oicq").PrivateMessageEvent>>;
    startBotLogin(session: NSession<'message.private'>, bot: Bot): void;
    handleCommand(session: NSession<'message'>): Promise<boolean | Sendable | MessageRet>;
    private _resolvePrefixes;
    handleMessage(session: NSession<'message'>): Promise<any>;
    private handleShortcut;
    emit<E extends keyof EventMap>(name: E, ...args: Parameters<EventMap[E]>): boolean;
    createSession<E extends keyof EventMap>(name: E, ...args: Parameters<EventMap[E]>): ToSession<Parameters<EventMap<any>[E]>>;
    /**
     * 发送消息
     * @param channelId 通道id
     * @param content 消息内容，如果为CQ码会自动转换
     * @param source 引用的消息，为string时代表消息id
     */
    sendMsg(channelId: ChannelId, content: Sendable, source?: Quotable | string): Promise<MessageRet>;
    broadcast(channelIds: (ChannelId | number)[], message: Sendable): Promise<any[]>;
}
export declare class BotList extends Array<Bot> {
    app: App;
    constructor(app: App);
    get(uin: number): Bot;
    create(options: BotOptions): Bot;
    remove(uin: number): Promise<boolean>;
}
export {};
