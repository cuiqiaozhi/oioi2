import { FaceElem, ImageElem, MessageElem, Sendable, VideoElem } from "oicq";
import { Dict } from "@oitq/utils";
export declare namespace Prompt {
    export interface Options<T extends keyof TypeKV> {
        type: T | Falsy | PrevCaller<T, T | Falsy>;
        name?: string;
        label?: Sendable;
        message?: Sendable;
        prefix?: string;
        action?: string;
        validate?: RegExp | ((message: string) => boolean);
        errorMsg?: string;
        separator?: string | PrevCaller<T, string>;
        choices?: ChoiceItem[] | PrevCaller<T, ChoiceItem[]>;
        initial?: ValueType<T> | PrevCaller<T, ValueType<T>>;
        timeout?: number;
        format?: (value: ValueType<T>) => ValueType<T>;
    }
    type Falsy = false | null | undefined;
    type PrevCaller<T extends keyof TypeKV, R = T> = (prev: any, answer: Dict, options: Options<T>) => R;
    export interface ChoiceItem {
        title: string;
        value: any;
    }
    export interface TypeKV {
        text: string;
        any: any;
        video: VideoElem;
        image: ImageElem;
        face: FaceElem;
        number: number;
        list: any[];
        confirm: boolean;
        date: Date;
        select: any;
        multipleSelect: any[];
    }
    export type Answers<V extends any = any> = {
        [id in string]: V;
    };
    export type ValueType<T extends keyof TypeKV> = T extends keyof TypeKV ? TypeKV[T] : any;
    export function formatValue<T extends keyof TypeKV>(prev: any, answer: Dict, option: Options<T>, message: MessageElem[]): ValueType<T>;
    export function getPrefix(type: keyof TypeKV): "请选择" | "是否确认" | "上传" | "请输入";
    export function formatOutput<T extends keyof TypeKV>(prev: any, answer: Dict, options: Options<T>): (string | MessageElem)[];
    export {};
}
