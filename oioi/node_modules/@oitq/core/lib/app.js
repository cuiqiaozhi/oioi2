"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
const bot_1 = require("./bot");
const utils_1 = require("@oitq/utils");
const context_1 = require("./context");
const plugin_1 = require("./plugin");
const static_1 = require("./static");
const path = __importStar(require("path"));
class App extends context_1.Context {
    constructor(options = path.join(static_1.dir, 'oitq.json')) {
        super(() => true);
        this.status = false;
        this._commandList = [];
        this._commands = new Map();
        this._shortcuts = [];
        this.app = this;
        this.disposeState = new Map();
        if (typeof options === 'string') {
            (0, utils_1.createIfNotExist)(options, static_1.defaultAppOptions);
            try {
                options = (0, utils_1.readConfig)(options);
            }
            catch {
                options = {};
            }
        }
        this.disposeState.set(null, {
            children: [],
            context: this,
            plugin: null,
            disposes: []
        });
        this.options = (0, utils_1.merge)(static_1.defaultAppOptions, options);
        this.bots = new bot_1.BotList(this);
        this.pluginManager = new plugin_1.PluginManager(this, this.options);
        this.pluginManager.init();
        this.prepare();
        this._commands.resolve = (key) => {
            if (!key)
                return;
            const segments = key.split('.');
            let i = 1, name = segments[0], cmd;
            while ((cmd = this.getCommand(name)) && i < segments.length) {
                name = cmd.name + '.' + segments[i++];
            }
            return cmd;
        };
        if (options.bots) {
            for (const botOptions of options.bots) {
                this.addBot(botOptions);
            }
        }
    }
    getCommand(name) {
        return this._commands.get(name);
    }
    prepare() {
    }
    addBot(options) {
        this.options.bots.push(options);
        const bot = this.bots.create(options);
        if (this.status) {
            bot.login(options.password);
        }
        return bot;
    }
    async removeBot(uin) {
        return await this.bots.remove(uin);
    }
    async start() {
        var _a;
        for (const bot of this.bots) {
            const botOptions = (_a = this.options).bots || (_a.bots = []);
            const option = botOptions.find(botOption => botOption.uin === bot.uin) || {};
            await bot.login(option.password);
            await this.pluginManager.restore(bot);
            await (0, utils_1.sleep)(3000); //避免同一设备同时多个bot登录异常，做延时
        }
        this.status = true;
        this.emit('ready');
    }
}
exports.App = App;
