import { LogLevel } from "oicq";
import { BotOptions } from "./bot";
import { Dict, Awaitable } from "@oitq/utils";
import { Context } from './context';
import { Plugin, PluginManager } from './plugin';
import { Computed } from "./session";
import { Command } from "@lc-cn/command";
interface KoaOptions {
    env?: string;
    keys?: string[];
    proxy?: boolean;
    subdomainOffset?: number;
    proxyIpHeader?: string;
    maxIpsCount?: number;
}
export interface AppOptions extends KoaOptions, PluginManager.Config {
    start?: boolean;
    prefix?: Computed<string | string[]>;
    minSimilarity?: number;
    bots?: BotOptions[];
    delay?: Dict<number>;
    token?: string;
    dir?: string;
    logLevel?: LogLevel;
    maxListeners?: number;
}
interface CommandMap extends Map<string, Command> {
    resolve(key: string): Command;
}
export interface App {
    start(...args: any[]): Awaitable<void>;
}
export declare class App extends Context {
    status: boolean;
    _commandList: Command[];
    _commands: CommandMap;
    _shortcuts: Command.Shortcut[];
    app: App;
    disposeState: Map<Plugin, Plugin.State>;
    options: AppOptions;
    constructor(options?: AppOptions | string);
    getCommand(name: string): Command<any[], {}>;
    prepare(): void;
    addBot(options: BotOptions): import("./bot").Bot;
    removeBot(uin: number): Promise<boolean>;
}
export {};
