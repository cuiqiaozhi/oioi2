import { App, Bot, Middleware, NSession, Prompt } from ".";
import { MessageElem, Sendable } from "oicq";
import { MessageRet } from "oicq/lib/events";
import { Awaitable, Dict } from "@oitq/utils";
import { Argv } from "@lc-cn/command";
export interface Session {
    self_id?: number;
    message_type?: string;
    cqCode?: string;
    message?: MessageElem[];
    post_type?: string;
    notice_type?: string;
    request_type?: string;
    user_id?: number;
    group_id?: number;
    discuss_id?: number;
    sub_type?: string;
    reply?(content: Sendable, quote?: boolean): Promise<MessageRet>;
}
export declare type Computed<T> = T | ((session: NSession<'message'>) => T);
export interface Parsed {
    content: string;
    prefix: string;
    appel: boolean;
}
export interface SuggestOptions {
    target: string;
    items: string[];
    prefix?: string;
    suffix: string;
    minSimilarity?: number;
    apply: (this: NSession<'message'>, suggestion: string) => Awaitable<void | string>;
}
export declare class Session {
    app: App;
    bot: Bot;
    argv: Argv;
    parsed?: Parsed;
    constructor(app: App, bot: Bot, data: Dict);
    middleware(middleware: Middleware): () => boolean;
    private promptReal;
    prompt<T extends keyof Prompt.TypeKV>(options: Prompt.Options<T> | Array<Prompt.Options<T>>): Promise<Prompt.Answers<Prompt.ValueType<T>>>;
    private prefixInters;
    execute(content?: string, autoReply?: boolean): Promise<Sendable | MessageRet | boolean>;
    getChannelId(): string;
    resolveValue<T>(source: T | ((session: Session) => T)): T;
    text(path: string | string[], params?: object): string;
    toJSON(): {
        [k: string]: any;
    };
}
