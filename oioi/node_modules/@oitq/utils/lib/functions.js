"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineProperty = exports.valueMap = exports.createIfNotExist = exports.makeArray = exports.isBailed = exports.isNullable = exports.writeConfig = exports.readConfig = exports.sleep = exports.remove = exports.merge = exports.error = exports.success = exports.noop = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
function noop() { }
exports.noop = noop;
function success(data) {
    return {
        success: true,
        data
    };
}
exports.success = success;
function error(errMsg) {
    return {
        success: false,
        msg: errMsg
    };
}
exports.error = error;
function merge(head, base) {
    Object.entries(base).forEach(([key, value]) => {
        if (typeof head[key] === 'undefined')
            return head[key] = base[key];
        if (typeof value === 'object' && typeof head[key] === 'object') {
            head[key] = merge(head[key], value);
        }
    });
    return head;
}
exports.merge = merge;
function remove(list, item) {
    const index = list.indexOf(item);
    if (index >= 0) {
        list.splice(index, 1);
        return true;
    }
}
exports.remove = remove;
async function sleep(timeout) {
    return new Promise(resolve => setTimeout(resolve, timeout));
}
exports.sleep = sleep;
function readConfig(configPath) {
    try {
        return JSON.parse(fs.readFileSync(configPath, { encoding: 'utf-8' }));
    }
    catch (e) {
        console.error(e);
        return null;
    }
}
exports.readConfig = readConfig;
function writeConfig(configPath, value = {}) {
    try {
        fs.writeFileSync(configPath, JSON.stringify(value, null, 4));
        return true;
    }
    catch (e) {
        console.error(e);
        return false;
    }
}
exports.writeConfig = writeConfig;
function isNullable(value) {
    return value === null || value === undefined;
}
exports.isNullable = isNullable;
function isBailed(value) {
    return value !== null && value !== false && value !== undefined;
}
exports.isBailed = isBailed;
function makeArray(source) {
    return Array.isArray(source) ? source : isNullable(source) ? [] : [source];
}
exports.makeArray = makeArray;
function createIfNotExist(filepath, value = {}) {
    const dirname = path.dirname(filepath);
    if (!fs.existsSync(dirname)) {
        fs.mkdirSync(dirname, { recursive: true });
    }
    if (!fs.existsSync(filepath)) {
        fs.writeFileSync(filepath, JSON.stringify(value, null, 4));
    }
}
exports.createIfNotExist = createIfNotExist;
function valueMap(object, transform) {
    return Object.fromEntries(Object.entries(object).map(([key, value]) => [key, transform(value, key)]));
}
exports.valueMap = valueMap;
function defineProperty(object, key, value) {
    Object.defineProperty(object, key, { writable: true, value });
}
exports.defineProperty = defineProperty;
