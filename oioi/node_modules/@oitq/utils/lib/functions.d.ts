import { Dict } from "./types";
export declare function noop(): any;
export declare function success(data: any): {
    success: boolean;
    data: any;
};
export declare function error(errMsg: any): {
    success: boolean;
    msg: any;
};
export declare function merge(head: any, base: any): any;
export declare function remove<T>(list: T[], item: T): boolean;
export declare function sleep(timeout: any): Promise<unknown>;
export declare function readConfig(configPath: string): any;
export declare function writeConfig(configPath: any, value?: {}): boolean;
export declare function isNullable(value: any): boolean;
export declare function isBailed(value: any): boolean;
export declare function makeArray<T>(source: T | T[]): T[];
export declare function createIfNotExist(filepath: any, value?: {}): void;
export declare function valueMap<T, U>(object: Dict<T>, transform: (value: T, key: string) => U): Dict<U>;
export declare function defineProperty<T, K extends keyof T>(object: T, key: K, value: T[K]): void;
export declare function defineProperty<T, K extends keyof any>(object: T, key: K, value: any): void;
